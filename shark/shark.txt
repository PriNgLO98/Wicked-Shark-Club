// SPDX-License-Identifier: MIT
pragma solidity >= 0.7.0 < 0.9.0;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract WickedSharkClub is ERC721, Ownable {
    using Strings for uint256;
    using Counters for Counters.Counter;

    Counters.Counter private supply;

    string public uriPrefix = "https://fastfoodfellaz.com/nfts/jsons/";
    string public uriSuffix = ".json";
    string public hiddenMetadataUri;
    
    uint256 public presaleCost = 0.000000000431 ether;
    uint256 public publicsaleCost = 0.000000000863 ether;

    uint256 public maxSupply = 10000;

    uint256 public nftPerAddressLimit = 1;
    uint256 public nftPresalePerAddressLimit = 2;
    uint256 public maxMintAmountPerTx = 2;

    bool public paused = false;
    bool public presale = true;
    bool public revealed = false;
    bool public onlyWhitelisted = false;

    mapping(address => bool) public whitelistedAddressesList;

    mapping(address => uint256) public addressMintedBalance;

    constructor() ERC721("FastFoodFellaz", "FFF") {
        setHiddenMetadataUri("https://fastfoodfellaz.com/nfts/placeholder.json");
    }

    // Mint Compliance
    modifier mintCompliance(uint256 _mintAmount) {
            if(supply.current() > 30){
               if(supply.current() < 2500){
                    if(presale == true ) {
                        uint256 ownerMintedCount = addressMintedBalance[msg.sender];
                        require(ownerMintedCount + _mintAmount <= nftPresalePerAddressLimit, "Max NFT per address exceeded");
                    }
                }else {
                    uint256 ownerMintedCount = addressMintedBalance[msg.sender];
                    require(ownerMintedCount + _mintAmount <= nftPerAddressLimit, "Max NFT per address exceeded");

                }

                require(_mintAmount > 0 && _mintAmount <= maxMintAmountPerTx, "Invalid mint amount!");
            }
            else{
                require(_mintAmount > 0 && _mintAmount <= 1 , "Invalid mint amount!");
            }
        require(supply.current() + _mintAmount <= maxSupply, "Max supply exceeded!");
        _;
    }

    // Total Supply
    function totalSupply() public view returns (uint256) {
        return supply.current();
    }

    // Mint
    function mint(uint256 _mintAmount) public payable mintCompliance(_mintAmount) {
        require(!paused, "The contract is paused!");

            if(supply.current() > 30){
                if(supply.current() < 2500){
                    if(presale == true) {
                        require(msg.value >= presaleCost * _mintAmount, "Insufficient funds!");
                    } else {
                        require(msg.value >= publicsaleCost * _mintAmount, "Insufficient funds!");
                    }
                }
            }else{
                require(_mintAmount > 0 && _mintAmount <= 1 , "Invalid mint amount!");
            }

        mintLoop(msg.sender, _mintAmount);
    }

    function ownerMint(uint256 _mintAmount) public onlyOwner {
        require(!paused, "The contract is paused!");

        mintLoop(msg.sender, _mintAmount);
    }

    function ownerMintSpecific(uint256 _tokenId) public onlyOwner {
        require(!paused, "The contract is paused!");

        _safeMint(msg.sender, _tokenId);
    }
  
    // Mint For Address
    function mintForAddress(uint256 mintAmount, address receiver) public mintCompliance(mintAmount) onlyOwner {
        mintLoop(receiver, mintAmount);
    }

    // Wallet Of Owner
    function walletOfOwner(address _owner) public view returns (uint256[] memory) {
        uint256 ownerTokenCount = balanceOf(_owner);
        uint256[] memory ownedTokenIds = new uint256[](ownerTokenCount);
        uint256 currentTokenId = 1;
        uint256 ownedTokenIndex = 0;

        while (ownedTokenIndex < ownerTokenCount && currentTokenId <= maxSupply) {
            address currentTokenOwner = ownerOf(currentTokenId);

            if (currentTokenOwner == _owner) {
                ownedTokenIds[ownedTokenIndex] = currentTokenId;
                ownedTokenIndex++;
            }

            currentTokenId++;
        }

        return ownedTokenIds;
    }

    // Token URI
    function tokenURI(uint256 _tokenId) public view virtual override returns (string memory) {
        require(_exists(_tokenId), "ERC721Metadata: URI query for nonexistent token");

        if (revealed == false) {
            return hiddenMetadataUri;
        }

        string memory currentBaseURI = _baseURI();
        return bytes(currentBaseURI).length > 0 ? string(abi.encodePacked(currentBaseURI, _tokenId.toString(), uriSuffix)) : "";
    }

    // Presale Cost
    function setPresaleCost(uint256 _cost) public onlyOwner {
        presaleCost = _cost;
    }

    // Publicsale Cost
    function setPublicsaleCost(uint256 _cost) public onlyOwner {
        publicsaleCost = _cost;
    }

    // Set NFT Per Address Limit
    function setNFTPerAddressLimit(uint256 _cost) public onlyOwner {
        nftPerAddressLimit = _cost;
    }

    // Set NFT Presale Per Address Limit
    function setNFTPresalePerAddressLimit(uint256 _cost) public onlyOwner {
        nftPresalePerAddressLimit = _cost;
    }

    // Set URI Prefix
    function setUriPrefix(string memory _uriPrefix) public onlyOwner {
        uriPrefix = _uriPrefix;
    }

    // Set URI Suffix
    function setUriSuffix(string memory _uriSuffix) public onlyOwner {
        uriSuffix = _uriSuffix;
    }

    // Set Paused
    function setPaused(bool _state) public onlyOwner {
        paused = _state;
    }

    // Set Hidden Metadata URI
    function setHiddenMetadataUri(string memory _hiddenMetadataUri) public onlyOwner {
        hiddenMetadataUri = _hiddenMetadataUri;
    }

    // Set Presale
    function setPresale(bool _state) public onlyOwner {
        presale = _state;
    }

    // Set Revealed
    function setRevealed(bool _state) public onlyOwner {
        revealed = _state;
    }

    // Withdraw
    function withdraw() public {
        (bool os, ) = payable(owner()).call{value: address(this).balance}("");
        require(os);
    }

    // Mint Loop
    function mintLoop(address receiver, uint256 _mintAmount) internal {
        for (uint256 i = 0; i < _mintAmount; i++) {
            supply.increment();
        
            _safeMint(receiver, supply.current());

            addressMintedBalance[msg.sender]++;
        }
    }

    // Base URI
    function _baseURI() internal view virtual override returns (string memory) {
        return uriPrefix;
    }

    // Set Only Whitelisted
    function setOnlyWhitelisted(bool _state) public onlyOwner {
        onlyWhitelisted = _state;
    }
    
    // Whitelist Users
    function addToWhiteList(address _addr) public onlyOwner {
        whitelistedAddressesList[_addr] = true;
    }

    function addArrayToWhiteList(address[] memory _addrs) public onlyOwner {
        for (uint256 i = 0;i< _addrs.length; i++) {
            whitelistedAddressesList[_addrs[i]] = true; 
        }
    }

    function removeFromWhiteList(address _addr) public onlyOwner {
        whitelistedAddressesList[_addr] = false;
    }

    function isInWhiteList(address _addr) public view returns (bool) {
        return whitelistedAddressesList[_addr]  || _addr == owner();
    }
}